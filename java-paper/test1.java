// class MyThread extends Thread {
//   public MyThread(String s) {
//     setName(s);
//   }

//   public void run() {
//     for(int i = 0; i < 6; i++) {
//       System.out.println(getName());
//       try {
//         sleep(500);
//       } catch (InterruptedException e) {}
//     }
//   }
// }

// public class Test31 {
//   public static void main(String args[]) {
//     new MyThread("Thread 1").start();
//     new MyThread("Thread 2").start();
//   }
// }

/* java 程序语言设计 */

/* 1*/
File myFile;
myFile = new File("myFile.txt");

/* 2 */
myFile = new File('/', "myFile.txt")

/* 3 */
File myDir = new File('/')
myFile = new File(myDir, "myFile.txt")

/* 请编写方法 int[] invertArray(int []a),该方法返回一个数组b,b中元素顺序为数组a中元素的逆序, int[] invertArray(int []a) { // 请填写内容 } */

int[] invertArray(int []a) {
  int b[] = new int[a.length]
  for(int i =0; i < a.length; i++) {
    b[i] = a[a.length - i - 1]
  }
}

// 程序设计题：请编写方法int searchMaxNumIndex(int []a)，该方法的功能是返回已知数组中最大数的下标。

int searchMaxNumIndex(int []a) {
  int maxNum = a[0]
  int maxNunIndex = 0
  for(int i = 0; i < a.length; i++) {
    if(a[i] > maxNum) {{
      maxNum = a[i]
      maxNumIndex = i
    }
  }
  return maxNumIndex
}


/* 2. 软件工程 */

/* 需求分析 */
在可行性研究的基础上进行更细致的分析工作，是软件定义时期的最后一次对目标及范围的求精和细化

/* 验收测试 */
验收测试是软件开发结束后，软件产品投入实际应用以前进行的最后一次质量检验活动

/* 软件危机 */
软件危机是指软件产品的质量低的通常不能接受，并且不能满足交付日期和预算限制

/* 行为者 */
指与系统交互的人或其他系统，它代表外部实体

/* 参数化抽象 */
参数化抽象是指当描述类的规格说明时并不具体指定要操作的数据类型，而是把数据类型作为参数

/* 程序流程图的缺点 */
1. 可以随心所欲的画控制流程线的流向，容易造成非结构化的程序结构，不加限制的使用GOTO语句，导致基本控制块产生多入口多出口，使软件质量收到影响
2. 不能反映逐步求精的过程，往往反应的是最后的结果
3. 不易表示数据结构
4. 描述过于琐碎，不利于理解大型程序

/* 用例的特征 */
1. 代表某些用户可见的功能，实现一个具体的用户目标
2. 用例总是被行为者启动，并向行为者提供可识别的值
3. 用例必须是完整的

/* 软件质量保证的功能 */
1. 制订和展开质量方针
2. 制定质量保证方针和质量保证标准，建立和管理质量保证体系
3. 明确各阶段的质量保证业务，坚持各阶段的质量评审
4. 确保设计质量，提出与分析重要的质量问题
5. 总结实现阶段的质量保证活动，整理面向用户的文档，说明书等
6. 鉴定产品质量，鉴定质量保证体系、收集、分析和整理质量信息


GPT:
1. 制订与监督质量标准
2. 过程管理与控制
3. 产品质量评估
4. 缺陷预防与管理
5. 质量审计
6. 过程改进
7. 培训与规范宣导

/* 软件危机的表现 */
1. 对软件开发成本和进度的估计不准确
2. 用户对“已完成”的系统经常不满意
3. 软件质量问题频出
4. 软件可维护程度低
5. 没有合适的文档数据
6. 软件的成本不断提高
7. 软件开发生产率的提高赶不上硬件的发展和人们需求的提升


/* 稳健性 */
指软件系统在面对无效输入，错误数据，异常环境或系统资源限制等非正常情况时，仍能维持其运行状态，避免崩溃或严重故障的能力

/* 提高稳健性的准则 */
1. 具备用户处理操作错误的能力
2. 检查参数的合法性
3. 不要预先测试限定条件
4. 先测试后优化

/* 面向对象方法的要点 */
1. 认为客观世界都是由对象组成的，任何事物都是对象，复杂的对象可以由比较简单的对象以某种方式组合而成
2. 把所有的对象都划分成对象类，每个对象定义一组数据和一组方法
3. 按照子类和父类的管理，把若干对象类组成一个层次结构的系统。
4. 对象彼此之间仅能通过传递消息互相联系

GPT：封装，继承，多态，抽象，类与对象 方面进行回答

/* 消息 */

GPT: 消息是对象间的通信方式，由发送者向接收者发送请求，触发接收者的方法（行为）执行


/* 组织环境要素例子 */
政策，商务，税法，市场，竞争


/* 可扩充性原则 */
1. 封装实现策略
2. 慎用共有方法
3. 不要用一个方法遍历多个关联链
4. 避免使用分支语句


/* 面向对象分析 */
抽取和整理用户需求并建立问题域精确模型的过程

/* 软件重用 */
在软件开发过程中重复使用相同或相似的软件元素的过程

/* 国际项目管理专业资质认证（IPMP） */
由国际项目管理协会（IPMA）在全球推行的四级项目管理专业资质认证体系的总称

/* 软件维护 */
软件系统交付之后对其实施更改的过程叫做软件维护

/* 标准化 */
指在经济，技术，科学以及管理等社会实践中，对重复性事物的概念通过制定，发布和实施标准达到统一，以获得最佳秩序和社会效益的活动

/* 简述jackson方法的步骤 */
1. 分析输入/输出数据结构
2. 匹配输入/输出数据结构
3. 设计程序结构
4. 细化并验证数据

// jackson 结构图
学生
├── 注册
├── 选择课程
│   └── 课程
└── 完成

/* 系统测试的主要步骤 */
1. 制定系统测试计划
2. 设计系统测试用例
3. 执行系统测试
4. 缺陷管理与改错

/* [简答题]简述保证设计结果清晰易懂的主要因素。 */
1. 用词一致
2. 使用已有的协议
3. 减少消息模式的数目
4. 避免模糊的定义

/* [简答题]简述3个子模型与对象模型的5个层次。 */
3个子模型： 在进行面向对象分析时，需要建立面向对象的对象模型，功能模型和行为模型
5个层次：主题层，对象层，结构层，属性层，服务层

/* [简答题]简述软件项目管理的主要内容。 */
1. 人员的组织与管理
2. 软件度量
3. 软件项目计划
4. 风险管理
5. 软件质量保证
6. 软件过程能力评估
7. 软件配置管理

/* ​[简答题]简述高质量的文档应当体现的方面。 */
1. 针对性
2. 准确性
3. 清晰性
5. 完整性
6. 灵活性
7. 可追溯性

/* [简答题]简述系统流程图的作用。 */
1. 制作系统流程图的过程是系统分析员全面了解系统业务处理概况的过程，它是系统分析员做进一步分析的依据。
2. 系统流程图是系统分析员、管理员、业务操作员相互交流的工具。
3. 系统分析员可直接在系统流程图上画出可以由计算机处理的部分。
4. 可利用系统流程图来分析业务流程的合理性。




/* java */
1. 输入数据流是指只能读不能写的数据流，用于向计算机内输入信息而用


/* 简述一个类中的信息包括哪些部分 */
1. 字段摘要
2. 构造方法摘要
3. 方法摘要
4. 字段详细信息
5. 构造方法详细信息
6. 方法详细信息

/* 简述在java中要转换对象引用时须做的检查 */
1. 向上转化总是合理的，
2. 向下转化则只能父类向子类转化，其他类之间的转化是不允许的
3. 编译器检查正确后，需在运算时检查引用类型

/* 简述swing中的四种顶层容器及其功能 */
1. JFrame： 创建一个带有标题行和控制按钮的窗口
2. JApplet: 创建小应用程序时使用，嵌入在浏览器中
3. JWindow: 创建一个没有标题行和控制按钮的窗口，通常很少使用
4. JDialog: 创建一个对话框

/* 简述创建通信通道的步骤 */
1. 建立输入数据流
2. 建立输出数据流
3. 将输入输出数据流连接起来

/* 简述java语言程序运行中可能遇到的两种错误分类 */
1. 致命性的错误：即程序出现非常严重的不正常错误，无法简单的恢复运行
2. 非致命性的错误：程序经过修正后可以正常执行

/* 简答题：简述字节码校验器检查的内容。 */
1. 类是否遵从JVM的类文件格式
2. 不出现访问违例情况
3. 代码不会引起运算栈溢出
4. 所有运算代码的参数类型总是正确的
5. 不会发生非法数据转换
6. 对象域访问是合法的


/* 简述在哪些情况下会使用异常机制 */
1. 网络错误，文件不存在
2. 在项目中使用统一的方式处理异常
3. 处理在方法，类库，类中抛出的异常时
4. 处理可能发生的故障
5. 当方法因无法控制的原因而不能完成任务时
6. 编写文字处理器一类的程序时

/* 简答题：简述运行Applet需要的步骤。 */

1. 创建一个HTML文件
2. 在文件中使用<applet>标记 指定要运行的Applet程序名称，将html url路径发送给浏览器
3. 通过浏览器装入并运行

/* 简答题：简述创建一个新的File对象的三种构造方法。 */
1. File myFile
myFile = new File('a')

2. myFile = new File('/', 'a')

3. File fileDir = new File('/')
myFile = new File(fileDir, 'a')



/*  System.arraycopy */
/**
 * src：源数组
  srcPos：源数组中要复制的起始位置
  dest：目标数组
  destPos：目标数组的起始插入位置
  length：要复制的元素数量
 */

public class test2 {
    public static void main(String[] args) {
        int[] src = {12, 2, 33, 54};
        int[] dest = new int[5];

        System.arraycopy(src, 0, dest, 0, src.length);
        System.out.print("My:");

        for (int i = 0; i < dest.length; i++) {
            System.out.print(dest[i] + ","); // 输出：12,2,33,54,0
        }
    }
}

/* 程序设计题：请编写方法int searchMaxNumIndex(int []a)，该方法的功能是返回已知数组中最大数的下标。 */

int searchMaxNumIndex(int []a) {
  int maxNum = a[0];
  int maxIndex = 0
  for(int i = 0; i < a.length; i++) {
    if(a[i] > maxNum) {
      maxNum = a[i]
      maxINdex = i
    }
    return maxIndex
  }
}